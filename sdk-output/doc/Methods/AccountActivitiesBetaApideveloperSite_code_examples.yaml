- path: /account-activities/{id}
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, AccountActivitiesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const accountActivitiesBetaApi = new AccountActivitiesBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // The account activity id

        try {
          const val = await accountActivitiesBetaApi.getAccountActivity(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await accountActivitiesBetaApi.getAccountActivity(id);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /account-activities
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, AccountActivitiesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const accountActivitiesBetaApi = new AccountActivitiesBetaApi(apiConfig);

        const requestedFor = "requestedFor_example"; // string | The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
        const requestedBy = "requestedBy_example"; // string | The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
        const regardingIdentity = "regardingIdentity_example"; // string | The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
        const type = "type_example"; // string | The type of account activity.
        const limit = 250; // number | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const offset = 0; // number | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const count = true; // boolean | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const filters = "filters_example"; // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw*
        const sorters = "sorters_example"; // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified**

        try {
          const val = await accountActivitiesBetaApi.listAccountActivities();
          
          // Below is a request that includes all optional parameters 
          // const val = await accountActivitiesBetaApi.listAccountActivities(requestedFor, requestedBy, regardingIdentity, type, limit, offset, count, filters, sorters);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
