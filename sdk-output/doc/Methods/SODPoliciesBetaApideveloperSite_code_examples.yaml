- path: /sod-policies
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi, SodPolicyBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const sodPolicyBeta : SodPolicyBeta = {name=Conflicting-Policy-Name, description=This policy ensures compliance of xyz, ownerRef={type=IDENTITY, id=2c91808568c529c60168cca6f90c1313, name=Owner Name}, externalPolicyReference=XYZ policy, compensatingControls=Have a manager review the transaction decisions for their "out of compliance" employee, correctionAdvice=Based on the role of the employee, managers should remove access that is not required for their job function., state=ENFORCED, tags=[string], creatorId=0f11f2a4-7c94-4bf3-a2bd-742580fe3bde, modifierId=0f11f2a4-7c94-4bf3-a2bd-742580fe3bde, violationOwnerAssignmentConfig={assignmentRule=MANAGER, ownerRef={type=IDENTITY, id=2c91808568c529c60168cca6f90c1313, name=Violation Owner Name}}, scheduled=true, type=CONFLICTING_ACCESS_BASED, conflictingAccessCriteria={leftCriteria={name=money-in, criteriaList=[{type=ENTITLEMENT, id=2c9180866166b5b0016167c32ef31a66}, {type=ENTITLEMENT, id=2c9180866166b5b0016167c32ef31a67}]}, rightCriteria={name=money-out, criteriaList=[{type=ENTITLEMENT, id=2c9180866166b5b0016167c32ef31a68}, {type=ENTITLEMENT, id=2c9180866166b5b0016167c32ef31a69}]}}}; // 

        try {
          const val = await sODPoliciesBetaApi.createSodPolicy(sodPolicyBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.createSodPolicy(sodPolicyBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-policies/{id}
  method: DELETE
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // The ID of the SOD Policy to delete.
        const logical = true; // boolean | Indicates whether this is a soft delete (logical true) or a hard delete.

        try {
          const val = await sODPoliciesBetaApi.deleteSodPolicy(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.deleteSodPolicy(id, logical);
          
          console.log('API called successfully.');
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-policies/{id}/schedule
  method: DELETE
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // The ID of the SOD policy the schedule must be deleted for.

        try {
          const val = await sODPoliciesBetaApi.deleteSodPolicySchedule(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.deleteSodPolicySchedule(id);
          
          console.log('API called successfully.');
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-violation-report/{reportResultId}/download/{fileName}
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const reportResultId : string = "ef38f94347e94562b5bb8424a56397d8"; // The ID of the report reference to download.
        const fileName : string = "custom-name"; // Custom Name for the  file.

        try {
          const val = await sODPoliciesBetaApi.getCustomViolationReport(reportResultId, fileName);
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.getCustomViolationReport(reportResultId, fileName);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-violation-report/{reportResultId}/download
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const reportResultId : string = "ef38f94347e94562b5bb8424a56397d8"; // The ID of the report reference to download.

        try {
          const val = await sODPoliciesBetaApi.getDefaultViolationReport(reportResultId);
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.getDefaultViolationReport(reportResultId);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-violation-report
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);


        try {
          const val = await sODPoliciesBetaApi.getSodAllReportRunStatus();
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.getSodAllReportRunStatus();
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-policies/{id}
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // The ID of the object reference to retrieve.

        try {
          const val = await sODPoliciesBetaApi.getSodPolicy(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.getSodPolicy(id);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-policies/{id}/schedule
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // The ID of the object reference to retrieve.

        try {
          const val = await sODPoliciesBetaApi.getSodPolicySchedule(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.getSodPolicySchedule(id);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-policies/sod-violation-report-status/{reportResultId}
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const reportResultId : string = "2e8d8180-24bc-4d21-91c6-7affdb473b0d"; // The ID of the report reference to retrieve.

        try {
          const val = await sODPoliciesBetaApi.getSodViolationReportRunStatus(reportResultId);
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.getSodViolationReportRunStatus(reportResultId);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-policies/{id}/violation-report
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // The ID of the object reference to retrieve.

        try {
          const val = await sODPoliciesBetaApi.getSodViolationReportStatus(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.getSodViolationReportStatus(id);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-policies
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const limit = 250; // number | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const offset = 0; // number | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const count = true; // boolean | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const filters = "id eq "bc693f07e7b645539626c25954c58554""; // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **state**: *eq, in*
        const sorters = "id,name"; // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, description**

        try {
          const val = await sODPoliciesBetaApi.listSodPolicies();
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.listSodPolicies(limit, offset, count, filters, sorters);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-policies/{id}
  method: PATCH
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi, object } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const id : string = "2c9180835d191a86015d28455b4a2329"; // The ID of the SOD policy being modified.
        const requestBody : Array<object> = [{op=replace, path=/description, value=Modified description}, {op=replace, path=/conflictingAccessCriteria/leftCriteria/name, value=money-in-modified}, {op=replace, path=/conflictingAccessCriteria/rightCriteria, value={name=money-out-modified, criteriaList=[{type=ENTITLEMENT, id=2c918087682f9a86016839c0509c1ab2}]}}]; // A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * ownerRef * externalPolicyReference * compensatingControls * correctionAdvice * state * tags * violationOwnerAssignmentConfig * scheduled * conflictingAccessCriteria 

        try {
          const val = await sODPoliciesBetaApi.patchSodPolicy(id, requestBody);
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.patchSodPolicy(id, requestBody);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-policies/{id}/schedule
  method: PUT
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi, SodPolicyScheduleBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // The ID of the SOD policy to update its schedule.
        const sodPolicyScheduleBeta : SodPolicyScheduleBeta = ; // 

        try {
          const val = await sODPoliciesBetaApi.putPolicySchedule(id, sodPolicyScheduleBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.putPolicySchedule(id, sodPolicyScheduleBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-policies/{id}
  method: PUT
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi, SodPolicyBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // The ID of the SOD policy to update.
        const sodPolicyBeta : SodPolicyBeta = {id=0f11f2a4-7c94-4bf3-a2bd-742580fe3bde, name=Conflicting-Policy-Name, created=2020-01-01T00:00:00.000000Z, modified=2020-01-01T00:00:00.000000Z, description=Modified Description, ownerRef={type=IDENTITY, id=2c91808568c529c60168cca6f90c1313, name=Owner Name}, externalPolicyReference=XYZ policy, compensatingControls=Have a manager review the transaction decisions for their "out of compliance" employee, correctionAdvice=Based on the role of the employee, managers should remove access that is not required for their job function., state=ENFORCED, tags=[string], creatorId=0f11f2a4-7c94-4bf3-a2bd-742580fe3bde, modifierId=0f11f2a4-7c94-4bf3-a2bd-742580fe3bde, violationOwnerAssignmentConfig={assignmentRule=MANAGER, ownerRef={type=IDENTITY, id=2c91808568c529c60168cca6f90c1313, name=Violation Owner Name}}, scheduled=true, type=CONFLICTING_ACCESS_BASED, conflictingAccessCriteria={leftCriteria={name=money-in, criteriaList=[{type=ENTITLEMENT, id=2c9180866166b5b0016167c32ef31a66}, {type=ENTITLEMENT, id=2c9180866166b5b0016167c32ef31a67}]}, rightCriteria={name=money-out, criteriaList=[{type=ENTITLEMENT, id=2c9180866166b5b0016167c32ef31a68}, {type=ENTITLEMENT, id=2c9180866166b5b0016167c32ef31a69}]}}}; // 

        try {
          const val = await sODPoliciesBetaApi.putSodPolicy(id, sodPolicyBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.putSodPolicy(id, sodPolicyBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-violation-report/run
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const multiPolicyRequestBeta = {filteredPolicyList=[b868cd40-ffa4-4337-9c07-1a51846cfa94, 63a07a7b-39a4-48aa-956d-50c827deba2a]}; // MultiPolicyRequestBeta | 

        try {
          const val = await sODPoliciesBetaApi.startSodAllPoliciesForOrg();
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.startSodAllPoliciesForOrg(multiPolicyRequestBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sod-policies/{id}/violation-report/run
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SODPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sODPoliciesBetaApi = new SODPoliciesBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // The SOD policy ID to run.

        try {
          const val = await sODPoliciesBetaApi.startSodPolicy(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await sODPoliciesBetaApi.startSodPolicy(id);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
