- path: /password-sync-groups
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, PasswordSyncGroupsBetaApi, PasswordSyncGroupBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const passwordSyncGroupsBetaApi = new PasswordSyncGroupsBetaApi(apiConfig);

        const passwordSyncGroupBeta : PasswordSyncGroupBeta = {name=Password Sync Group 2, passwordPolicyId=2c91808d744ba0ce01746f93b6204501, sourceIds=[2c918084660f45d6016617daa9210584, 2c918084660f45d6016617daa9210500]}; // 

        try {
          const val = await passwordSyncGroupsBetaApi.createPasswordSyncGroup(passwordSyncGroupBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await passwordSyncGroupsBetaApi.createPasswordSyncGroup(passwordSyncGroupBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /password-sync-groups/{id}
  method: DELETE
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, PasswordSyncGroupsBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const passwordSyncGroupsBetaApi = new PasswordSyncGroupsBetaApi(apiConfig);

        const id : string = "6881f631-3bd5-4213-9c75-8e05cc3e35dd"; // The ID of password sync group to delete.

        try {
          const val = await passwordSyncGroupsBetaApi.deletePasswordSyncGroup(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await passwordSyncGroupsBetaApi.deletePasswordSyncGroup(id);
          
          console.log('API called successfully.');
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /password-sync-groups/{id}
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, PasswordSyncGroupsBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const passwordSyncGroupsBetaApi = new PasswordSyncGroupsBetaApi(apiConfig);

        const id : string = "6881f631-3bd5-4213-9c75-8e05cc3e35dd"; // The ID of password sync group to retrieve.

        try {
          const val = await passwordSyncGroupsBetaApi.getPasswordSyncGroup(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await passwordSyncGroupsBetaApi.getPasswordSyncGroup(id);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /password-sync-groups
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, PasswordSyncGroupsBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const passwordSyncGroupsBetaApi = new PasswordSyncGroupsBetaApi(apiConfig);

        const limit = 250; // number | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const offset = 0; // number | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const count = true; // boolean | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.

        try {
          const val = await passwordSyncGroupsBetaApi.getPasswordSyncGroups();
          
          // Below is a request that includes all optional parameters 
          // const val = await passwordSyncGroupsBetaApi.getPasswordSyncGroups(limit, offset, count);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /password-sync-groups/{id}
  method: PUT
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, PasswordSyncGroupsBetaApi, PasswordSyncGroupBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const passwordSyncGroupsBetaApi = new PasswordSyncGroupsBetaApi(apiConfig);

        const id : string = "6881f631-3bd5-4213-9c75-8e05cc3e35dd"; // The ID of password sync group to update.
        const passwordSyncGroupBeta : PasswordSyncGroupBeta = {id=6881f631-3bd5-4213-9c75-8e05cc3e35dd, name=Password Sync Group 2, passwordPolicyId=2c91808d744ba0ce01746f93b6204501, sourceIds=[2c918084660f45d6016617daa9210584, 2c918084660f45d6016617daa9210500]}; // 

        try {
          const val = await passwordSyncGroupsBetaApi.updatePasswordSyncGroup(id, passwordSyncGroupBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await passwordSyncGroupsBetaApi.updatePasswordSyncGroup(id, passwordSyncGroupBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
