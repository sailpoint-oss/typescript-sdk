- path: /access-request-approvals/{approvalId}/approve
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, AccessRequestApprovalsBetaApi, CommentDtoBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const accessRequestApprovalsBetaApi = new AccessRequestApprovalsBetaApi(apiConfig);

        const approvalId : string = "2c91808b7294bea301729568c68c002e"; // Approval ID.
        const commentDtoBeta : CommentDtoBeta = ; // Reviewer\'s comment.

        try {
          const val = await accessRequestApprovalsBetaApi.approveAccessRequest(approvalId, commentDtoBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await accessRequestApprovalsBetaApi.approveAccessRequest(approvalId, commentDtoBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /access-request-approvals/{approvalId}/forward
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, AccessRequestApprovalsBetaApi, ForwardApprovalDtoBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const accessRequestApprovalsBetaApi = new AccessRequestApprovalsBetaApi(apiConfig);

        const approvalId : string = "2c91808b7294bea301729568c68c002e"; // Approval ID.
        const forwardApprovalDtoBeta : ForwardApprovalDtoBeta = ; // Information about the forwarded approval.

        try {
          const val = await accessRequestApprovalsBetaApi.forwardAccessRequest(approvalId, forwardApprovalDtoBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await accessRequestApprovalsBetaApi.forwardAccessRequest(approvalId, forwardApprovalDtoBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /access-request-approvals/approval-summary
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, AccessRequestApprovalsBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const accessRequestApprovalsBetaApi = new AccessRequestApprovalsBetaApi(apiConfig);

        const ownerId = "2c91808568c529c60168cca6f90c1313"; // string | The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.    * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value.
        const fromDate = "from-date=2020-03-19T19:59:11Z"; // string | This is the date and time the results will be shown from. It must be in a valid ISO-8601 format.

        try {
          const val = await accessRequestApprovalsBetaApi.getAccessRequestApprovalSummary();
          
          // Below is a request that includes all optional parameters 
          // const val = await accessRequestApprovalsBetaApi.getAccessRequestApprovalSummary(ownerId, fromDate);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /access-request-approvals/completed
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, AccessRequestApprovalsBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const accessRequestApprovalsBetaApi = new AccessRequestApprovalsBetaApi(apiConfig);

        const ownerId = "ownerId_example"; // string | If present, the value returns only completed approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
        const limit = 250; // number | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const offset = 0; // number | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const count = true; // boolean | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const filters = "filters_example"; // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, sw*
        const sorters = "sorters_example"; // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**

        try {
          const val = await accessRequestApprovalsBetaApi.listCompletedApprovals();
          
          // Below is a request that includes all optional parameters 
          // const val = await accessRequestApprovalsBetaApi.listCompletedApprovals(ownerId, limit, offset, count, filters, sorters);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /access-request-approvals/pending
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, AccessRequestApprovalsBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const accessRequestApprovalsBetaApi = new AccessRequestApprovalsBetaApi(apiConfig);

        const ownerId = "ownerId_example"; // string | If present, the value returns only pending approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
        const limit = 250; // number | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const offset = 0; // number | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const count = true; // boolean | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const filters = "filters_example"; // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **requestedFor.id**: *eq, in*  **modified**: *gt, lt, ge, le, eq, in*
        const sorters = "sorters_example"; // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**

        try {
          const val = await accessRequestApprovalsBetaApi.listPendingApprovals();
          
          // Below is a request that includes all optional parameters 
          // const val = await accessRequestApprovalsBetaApi.listPendingApprovals(ownerId, limit, offset, count, filters, sorters);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /access-request-approvals/{approvalId}/reject
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, AccessRequestApprovalsBetaApi, CommentDtoBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const accessRequestApprovalsBetaApi = new AccessRequestApprovalsBetaApi(apiConfig);

        const approvalId : string = "2c91808b7294bea301729568c68c002e"; // Approval ID.
        const commentDtoBeta : CommentDtoBeta = ; // Reviewer\'s comment.

        try {
          const val = await accessRequestApprovalsBetaApi.rejectAccessRequest(approvalId, commentDtoBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await accessRequestApprovalsBetaApi.rejectAccessRequest(approvalId, commentDtoBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
