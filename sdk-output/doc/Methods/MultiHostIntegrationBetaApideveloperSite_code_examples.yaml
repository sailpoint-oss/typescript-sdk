- path: /multihosts
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MultiHostIntegrationBetaApi, MultiHostIntegrationsCreateBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const multiHostIntegrationBetaApi = new MultiHostIntegrationBetaApi(apiConfig);

        const multiHostIntegrationsCreateBeta : MultiHostIntegrationsCreateBeta = ; // The specifics of the Multi-Host Integration to create

        try {
          const val = await multiHostIntegrationBetaApi.createMultiHostIntegration(multiHostIntegrationsCreateBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await multiHostIntegrationBetaApi.createMultiHostIntegration(multiHostIntegrationsCreateBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /multihosts/{multihostId}
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MultiHostIntegrationBetaApi, MultiHostIntegrationsCreateSourcesBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const multiHostIntegrationBetaApi = new MultiHostIntegrationBetaApi(apiConfig);

        const multihostId : string = "2c91808568c529c60168cca6f90c1326"; // ID of the Multi-Host Integration.
        const multiHostIntegrationsCreateSourcesBeta : Array<MultiHostIntegrationsCreateSourcesBeta> = ; // The specifics of the sources to create within Multi-Host Integration.

        try {
          const val = await multiHostIntegrationBetaApi.createSourcesWithinMultiHost(multihostId, multiHostIntegrationsCreateSourcesBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await multiHostIntegrationBetaApi.createSourcesWithinMultiHost(multihostId, multiHostIntegrationsCreateSourcesBeta);
          
          console.log('API called successfully.');
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /multihosts/{multihostId}
  method: DELETE
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MultiHostIntegrationBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const multiHostIntegrationBetaApi = new MultiHostIntegrationBetaApi(apiConfig);

        const multihostId : string = "2c91808568c529c60168cca6f90c1326"; // ID of Multi-Host Integration to delete.

        try {
          const val = await multiHostIntegrationBetaApi.deleteMultiHost(multihostId);
          
          // Below is a request that includes all optional parameters 
          // const val = await multiHostIntegrationBetaApi.deleteMultiHost(multihostId);
          
          console.log('API called successfully.');
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /multihosts/{multihostId}/acctAggregationGroups
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MultiHostIntegrationBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const multiHostIntegrationBetaApi = new MultiHostIntegrationBetaApi(apiConfig);

        const multihostId : string = "aMultiHostId"; // ID of the Multi-Host Integration to update

        try {
          const val = await multiHostIntegrationBetaApi.getAcctAggregationGroups(multihostId);
          
          // Below is a request that includes all optional parameters 
          // const val = await multiHostIntegrationBetaApi.getAcctAggregationGroups(multihostId);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /multihosts/{multiHostId}/entitlementAggregationGroups
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MultiHostIntegrationBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const multiHostIntegrationBetaApi = new MultiHostIntegrationBetaApi(apiConfig);

        const multiHostId : string = "aMultiHostId"; // ID of the Multi-Host Integration to update

        try {
          const val = await multiHostIntegrationBetaApi.getEntitlementAggregationGroups(multiHostId);
          
          // Below is a request that includes all optional parameters 
          // const val = await multiHostIntegrationBetaApi.getEntitlementAggregationGroups(multiHostId);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /multihosts/{multihostId}
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MultiHostIntegrationBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const multiHostIntegrationBetaApi = new MultiHostIntegrationBetaApi(apiConfig);

        const multihostId : string = "2c91808568c529c60168cca6f90c1326"; // ID of the Multi-Host Integration.

        try {
          const val = await multiHostIntegrationBetaApi.getMultiHostIntegrations(multihostId);
          
          // Below is a request that includes all optional parameters 
          // const val = await multiHostIntegrationBetaApi.getMultiHostIntegrations(multihostId);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /multihosts
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MultiHostIntegrationBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const multiHostIntegrationBetaApi = new MultiHostIntegrationBetaApi(apiConfig);

        const offset = 0; // number | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const limit = 250; // number | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const sorters = "name"; // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
        const filters = "id eq 2c91808b6ef1d43e016efba0ce470904"; // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *in*  **forSubAdminId**: *in*
        const count = true; // boolean | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const forSubadmin = "5168015d32f890ca15812c9180835d2e"; // string | If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity or SOURCE_SUBADMIN identity.  The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity\'s ID.  A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.

        try {
          const val = await multiHostIntegrationBetaApi.getMultiHostIntegrationsList();
          
          // Below is a request that includes all optional parameters 
          // const val = await multiHostIntegrationBetaApi.getMultiHostIntegrationsList(offset, limit, sorters, filters, count, forSubadmin);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /multihosts/{multiHostId}/sources/errors
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MultiHostIntegrationBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const multiHostIntegrationBetaApi = new MultiHostIntegrationBetaApi(apiConfig);

        const multiHostId : string = "004091cb79b04636b88662afa50a4440"; // ID of the Multi-Host Integration

        try {
          const val = await multiHostIntegrationBetaApi.getMultiHostSourceCreationErrors(multiHostId);
          
          // Below is a request that includes all optional parameters 
          // const val = await multiHostIntegrationBetaApi.getMultiHostSourceCreationErrors(multiHostId);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /multihosts/types
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MultiHostIntegrationBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const multiHostIntegrationBetaApi = new MultiHostIntegrationBetaApi(apiConfig);


        try {
          const val = await multiHostIntegrationBetaApi.getMultihostIntegrationTypes();
          
          // Below is a request that includes all optional parameters 
          // const val = await multiHostIntegrationBetaApi.getMultihostIntegrationTypes();
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /multihosts/{multihostId}/sources
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MultiHostIntegrationBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const multiHostIntegrationBetaApi = new MultiHostIntegrationBetaApi(apiConfig);

        const multihostId : string = "aMultiHostId"; // ID of the Multi-Host Integration to update
        const offset = 0; // number | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const limit = 250; // number | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const sorters = "name"; // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
        const filters = "id eq 2c91808b6ef1d43e016efba0ce470904"; // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *in*
        const count = true; // boolean | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.

        try {
          const val = await multiHostIntegrationBetaApi.getSourcesWithinMultiHost(multihostId);
          
          // Below is a request that includes all optional parameters 
          // const val = await multiHostIntegrationBetaApi.getSourcesWithinMultiHost(multihostId, offset, limit, sorters, filters, count);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /multihosts/{multihostId}/sources/testConnection
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MultiHostIntegrationBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const multiHostIntegrationBetaApi = new MultiHostIntegrationBetaApi(apiConfig);

        const multihostId : string = "2c91808568c529c60168cca6f90c1324"; // ID of the Multi-Host Integration

        try {
          const val = await multiHostIntegrationBetaApi.testConnectionMultiHostSources(multihostId);
          
          // Below is a request that includes all optional parameters 
          // const val = await multiHostIntegrationBetaApi.testConnectionMultiHostSources(multihostId);
          
          console.log('API called successfully.');
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /multihosts/{multihostId}/sources/{sourceId}/testConnection
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MultiHostIntegrationBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const multiHostIntegrationBetaApi = new MultiHostIntegrationBetaApi(apiConfig);

        const multihostId : string = "2c91808568c529c60168cca6f90c1326"; // ID of the Multi-Host Integration
        const sourceId : string = "2c91808568c529f60168cca6f90c1324"; // ID of the source within the Multi-Host Integration

        try {
          const val = await multiHostIntegrationBetaApi.testSourceConnectionMultihost(multihostId, sourceId);
          
          // Below is a request that includes all optional parameters 
          // const val = await multiHostIntegrationBetaApi.testSourceConnectionMultihost(multihostId, sourceId);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /multihosts/{multihostId}
  method: PATCH
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MultiHostIntegrationBetaApi, UpdateMultiHostSourcesRequestInnerBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const multiHostIntegrationBetaApi = new MultiHostIntegrationBetaApi(apiConfig);

        const multihostId : string = "anId"; // ID of the Multi-Host Integration to update.
        const updateMultiHostSourcesRequestInnerBeta : Array<UpdateMultiHostSourcesRequestInnerBeta> = [{op=add, path=/description, value=MDK Multi-Host Integration 222 description}]; // This endpoint allows you to update a Multi-Host Integration. 

        try {
          const val = await multiHostIntegrationBetaApi.updateMultiHostSources(multihostId, updateMultiHostSourcesRequestInnerBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await multiHostIntegrationBetaApi.updateMultiHostSources(multihostId, updateMultiHostSourcesRequestInnerBeta);
          
          console.log('API called successfully.');
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
