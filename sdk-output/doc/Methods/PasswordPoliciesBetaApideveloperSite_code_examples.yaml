- path: /password-policies
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, PasswordPoliciesBetaApi, PasswordPolicyV3DtoBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const passwordPoliciesBetaApi = new PasswordPoliciesBetaApi(apiConfig);

        const passwordPolicyV3DtoBeta : PasswordPolicyV3DtoBeta = {description=New Password Policy with high requirements to password complexity., id=null, name=High security Password Policy, dateCreated=1639056206564, lastUpdated=1662385430753, firstExpirationReminder=90, accountIdMinWordLength=3, accountNameMinWordLength=3, maxLength=0, maxRepeatedChars=4, minAlpha=1, minCharacterTypes=-1, minLength=8, minLower=0, minNumeric=1, minSpecial=0, minUpper=0, passwordExpiration=90, defaultPolicy=false, enablePasswdExpiration=false, requireStrongAuthn=false, requireStrongAuthOffNetwork=false, requireStrongAuthUntrustedGeographies=false, useAccountAttributes=false, useDictionary=false, useIdentityAttributes=false, validateAgainstAccountId=true, validateAgainstAccountName=true, sourceIds=[2c91808382ffee0b01830de154f14034, 2c91808582ffee0c01830de36511405f]}; // 

        try {
          const val = await passwordPoliciesBetaApi.createPasswordPolicy(passwordPolicyV3DtoBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await passwordPoliciesBetaApi.createPasswordPolicy(passwordPolicyV3DtoBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /password-policies/{id}
  method: DELETE
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, PasswordPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const passwordPoliciesBetaApi = new PasswordPoliciesBetaApi(apiConfig);

        const id : string = "ff808081838d9e9d01838da6a03e0002"; // The ID of password policy to delete.

        try {
          const val = await passwordPoliciesBetaApi.deletePasswordPolicy(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await passwordPoliciesBetaApi.deletePasswordPolicy(id);
          
          console.log('API called successfully.');
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /password-policies/{id}
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, PasswordPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const passwordPoliciesBetaApi = new PasswordPoliciesBetaApi(apiConfig);

        const id : string = "ff808081838d9e9d01838da6a03e0005"; // The ID of password policy to retrieve.

        try {
          const val = await passwordPoliciesBetaApi.getPasswordPolicyById(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await passwordPoliciesBetaApi.getPasswordPolicyById(id);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /password-policies
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, PasswordPoliciesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const passwordPoliciesBetaApi = new PasswordPoliciesBetaApi(apiConfig);

        const limit = 250; // number | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const offset = 0; // number | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const count = true; // boolean | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.

        try {
          const val = await passwordPoliciesBetaApi.listPasswordPolicies();
          
          // Below is a request that includes all optional parameters 
          // const val = await passwordPoliciesBetaApi.listPasswordPolicies(limit, offset, count);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /password-policies/{id}
  method: PUT
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, PasswordPoliciesBetaApi, PasswordPolicyV3DtoBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const passwordPoliciesBetaApi = new PasswordPoliciesBetaApi(apiConfig);

        const id : string = "ff808081838d9e9d01838da6a03e0007"; // The ID of password policy to update.
        const passwordPolicyV3DtoBeta : PasswordPolicyV3DtoBeta = {description=Password Policy after update., id=2c91808e7d976f3b017d9f5ceae440c8, name=Improved Password Policy, dateCreated=1639056206564, lastUpdated=1662385430753, firstExpirationReminder=90, accountIdMinWordLength=3, accountNameMinWordLength=3, maxLength=0, maxRepeatedChars=4, minAlpha=1, minCharacterTypes=-1, minLength=8, minLower=0, minNumeric=1, minSpecial=0, minUpper=0, passwordExpiration=90, defaultPolicy=false, enablePasswdExpiration=false, requireStrongAuthn=false, requireStrongAuthOffNetwork=false, requireStrongAuthUntrustedGeographies=false, useAccountAttributes=false, useDictionary=false, useIdentityAttributes=false, validateAgainstAccountId=true, validateAgainstAccountName=true, sourceIds=[2c91808382ffee0b01830de154f14034, 2c91808582ffee0c01830de36511405f]}; // 

        try {
          const val = await passwordPoliciesBetaApi.setPasswordPolicy(id, passwordPolicyV3DtoBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await passwordPoliciesBetaApi.setPasswordPolicy(id, passwordPolicyV3DtoBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
