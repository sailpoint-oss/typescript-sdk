- path: /identity-profiles
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentityProfilesBetaApi, IdentityProfileBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identityProfilesBetaApi = new IdentityProfilesBetaApi(apiConfig);

        const identityProfileBeta : IdentityProfileBeta = ; // 

        try {
          const val = await identityProfilesBetaApi.createIdentityProfile(identityProfileBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await identityProfilesBetaApi.createIdentityProfile(identityProfileBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identity-profiles/{identity-profile-id}
  method: DELETE
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentityProfilesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identityProfilesBetaApi = new IdentityProfilesBetaApi(apiConfig);

        const identityProfileId : string = "ef38f94347e94562b5bb8424a56397d8"; // The Identity Profile ID.

        try {
          const val = await identityProfilesBetaApi.deleteIdentityProfile(identityProfileId);
          
          // Below is a request that includes all optional parameters 
          // const val = await identityProfilesBetaApi.deleteIdentityProfile(identityProfileId);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identity-profiles/bulk-delete
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentityProfilesBetaApi, string } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identityProfilesBetaApi = new IdentityProfilesBetaApi(apiConfig);

        const requestBody : Array<string> = ; // Identity Profile bulk delete request body.

        try {
          const val = await identityProfilesBetaApi.deleteIdentityProfiles(requestBody);
          
          // Below is a request that includes all optional parameters 
          // const val = await identityProfilesBetaApi.deleteIdentityProfiles(requestBody);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identity-profiles/export
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentityProfilesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identityProfilesBetaApi = new IdentityProfilesBetaApi(apiConfig);

        const limit = 250; // number | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const offset = 0; // number | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const count = true; // boolean | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const filters = "id eq 8c190e6787aa4ed9a90bd9d5344523fb"; // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne*  **name**: *eq, ne*  **priority**: *eq, ne*
        const sorters = "name,-priority"; // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority**

        try {
          const val = await identityProfilesBetaApi.exportIdentityProfiles();
          
          // Below is a request that includes all optional parameters 
          // const val = await identityProfilesBetaApi.exportIdentityProfiles(limit, offset, count, filters, sorters);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identity-profiles/{identity-profile-id}/default-identity-attribute-config
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentityProfilesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identityProfilesBetaApi = new IdentityProfilesBetaApi(apiConfig);

        const identityProfileId : string = "ef38f94347e94562b5bb8424a56397d8"; // The Identity Profile ID

        try {
          const val = await identityProfilesBetaApi.getDefaultIdentityAttributeConfig(identityProfileId);
          
          // Below is a request that includes all optional parameters 
          // const val = await identityProfilesBetaApi.getDefaultIdentityAttributeConfig(identityProfileId);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identity-profiles/{identity-profile-id}
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentityProfilesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identityProfilesBetaApi = new IdentityProfilesBetaApi(apiConfig);

        const identityProfileId : string = "ef38f94347e94562b5bb8424a56397d8"; // The Identity Profile ID

        try {
          const val = await identityProfilesBetaApi.getIdentityProfile(identityProfileId);
          
          // Below is a request that includes all optional parameters 
          // const val = await identityProfilesBetaApi.getIdentityProfile(identityProfileId);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identity-profiles/import
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentityProfilesBetaApi, IdentityProfileExportedObjectBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identityProfilesBetaApi = new IdentityProfilesBetaApi(apiConfig);

        const identityProfileExportedObjectBeta : Array<IdentityProfileExportedObjectBeta> = ; // Previously exported Identity Profiles.

        try {
          const val = await identityProfilesBetaApi.importIdentityProfiles(identityProfileExportedObjectBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await identityProfilesBetaApi.importIdentityProfiles(identityProfileExportedObjectBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identity-profiles
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentityProfilesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identityProfilesBetaApi = new IdentityProfilesBetaApi(apiConfig);

        const limit = 250; // number | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const offset = 0; // number | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const count = true; // boolean | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const filters = "id eq 8c190e6787aa4ed9a90bd9d5344523fb"; // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne, ge, gt, in, le, lt, isnull, sw*  **name**: *eq, ne, in, le, lt, isnull, sw*  **priority**: *eq, ne*
        const sorters = "name,-priority"; // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name**

        try {
          const val = await identityProfilesBetaApi.listIdentityProfiles();
          
          // Below is a request that includes all optional parameters 
          // const val = await identityProfilesBetaApi.listIdentityProfiles(limit, offset, count, filters, sorters);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identity-profiles/identity-preview
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentityProfilesBetaApi, IdentityPreviewRequestBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identityProfilesBetaApi = new IdentityProfilesBetaApi(apiConfig);

        const identityPreviewRequestBeta : IdentityPreviewRequestBeta = ; // Identity Preview request body.

        try {
          const val = await identityProfilesBetaApi.showGenerateIdentityPreview(identityPreviewRequestBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await identityProfilesBetaApi.showGenerateIdentityPreview(identityPreviewRequestBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identity-profiles/{identity-profile-id}/process-identities
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentityProfilesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identityProfilesBetaApi = new IdentityProfilesBetaApi(apiConfig);

        const identityProfileId : string = "ef38f94347e94562b5bb8424a56397d8"; // The Identity Profile ID to be processed

        try {
          const val = await identityProfilesBetaApi.syncIdentityProfile(identityProfileId);
          
          // Below is a request that includes all optional parameters 
          // const val = await identityProfilesBetaApi.syncIdentityProfile(identityProfileId);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identity-profiles/{identity-profile-id}
  method: PATCH
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentityProfilesBetaApi, JsonPatchOperationBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identityProfilesBetaApi = new IdentityProfilesBetaApi(apiConfig);

        const identityProfileId : string = "ef38f94347e94562b5bb8424a56397d8"; // The Identity Profile ID
        const jsonPatchOperationBeta : Array<JsonPatchOperationBeta> = [{op=add, path=/identityAttributeConfig/attributeTransforms/0, value={identityAttributeName=location, transformDefinition={type=accountAttribute, attributes={sourceName=Employees, attributeName=location, sourceId=2c91808878b7d63b0178c66ffcdc4ce4}}}}]; // A list of Identity Profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.

        try {
          const val = await identityProfilesBetaApi.updateIdentityProfile(identityProfileId, jsonPatchOperationBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await identityProfilesBetaApi.updateIdentityProfile(identityProfileId, jsonPatchOperationBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
