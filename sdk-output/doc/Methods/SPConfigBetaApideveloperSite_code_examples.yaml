- path: /sp-config/export
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SPConfigBetaApi, ExportPayloadBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sPConfigBetaApi = new SPConfigBetaApi(apiConfig);

        const exportPayloadBeta : ExportPayloadBeta = {description=Export all available objects, excludeTypes=[], includeTypes=[ACCESS_PROFILE, ACCESS_REQUEST_CONFIG, ATTR_SYNC_SOURCE_CONFIG, AUTH_ORG, CAMPAIGN_FILTER, FORM_DEFINITION, GOVERNANCE_GROUP, IDENTITY_OBJECT_CONFIG, IDENTITY_PROFILE, LIFECYCLE_STATE, NOTIFICATION_TEMPLATE, PASSWORD_POLICY, PASSWORD_SYNC_GROUP, PUBLIC_IDENTITIES_CONFIG, ROLE, RULE, SEGMENT, SERVICE_DESK_INTEGRATION, SOD_POLICY, SOURCE, TAG, TRANSFORM, TRIGGER_SUBSCRIPTION, WORKFLOW], objectOptions={}}; // Export options control what will be included in the export.

        try {
          const val = await sPConfigBetaApi.exportSpConfig(exportPayloadBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await sPConfigBetaApi.exportSpConfig(exportPayloadBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sp-config/export/{id}/download
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SPConfigBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sPConfigBetaApi = new SPConfigBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // The ID of the export job whose results will be downloaded.

        try {
          const val = await sPConfigBetaApi.getSpConfigExport(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await sPConfigBetaApi.getSpConfigExport(id);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sp-config/export/{id}
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SPConfigBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sPConfigBetaApi = new SPConfigBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // The ID of the export job whose status will be returned.

        try {
          const val = await sPConfigBetaApi.getSpConfigExportStatus(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await sPConfigBetaApi.getSpConfigExportStatus(id);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sp-config/import/{id}/download
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SPConfigBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sPConfigBetaApi = new SPConfigBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // The ID of the import job whose results will be downloaded.

        try {
          const val = await sPConfigBetaApi.getSpConfigImport(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await sPConfigBetaApi.getSpConfigImport(id);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sp-config/import/{id}
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SPConfigBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sPConfigBetaApi = new SPConfigBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // The ID of the import job whose status will be returned.

        try {
          const val = await sPConfigBetaApi.getSpConfigImportStatus(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await sPConfigBetaApi.getSpConfigImportStatus(id);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sp-config/import
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SPConfigBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sPConfigBetaApi = new SPConfigBetaApi(apiConfig);

        const data : File = BINARY_DATA_HERE; // JSON file containing the objects to be imported.
        const preview = true; // boolean | This option is intended to give the user information about how an import operation would proceed, without having any effect on the target tenant. If this parameter is \"true\", no objects will be imported. Instead, the import process will pre-process the import file and attempt to resolve references within imported objects. The import result file will contain messages pertaining to how specific references were resolved, any errors associated with the preprocessing, and messages indicating which objects would be imported. 
        const _options = ; // ImportOptionsBeta | 

        try {
          const val = await sPConfigBetaApi.importSpConfig(data);
          
          // Below is a request that includes all optional parameters 
          // const val = await sPConfigBetaApi.importSpConfig(data, preview, _options);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /sp-config/config-objects
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, SPConfigBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const sPConfigBetaApi = new SPConfigBetaApi(apiConfig);


        try {
          const val = await sPConfigBetaApi.listSpConfigObjects();
          
          // Below is a request that includes all optional parameters 
          // const val = await sPConfigBetaApi.listSpConfigObjects();
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
