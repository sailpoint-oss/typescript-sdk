- path: /mfa/token/send
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MFAControllerBetaApi, SendTokenRequestBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const mFAControllerBetaApi = new MFAControllerBetaApi(apiConfig);

        const sendTokenRequestBeta : SendTokenRequestBeta = {userAlias=will.albin, deliveryType=EMAIL_WORK}; // 

        try {
          const val = await mFAControllerBetaApi.createSendToken(sendTokenRequestBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await mFAControllerBetaApi.createSendToken(sendTokenRequestBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /mfa/{method}/poll
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MFAControllerBetaApi, VerificationPollRequestBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const mFAControllerBetaApi = new MFAControllerBetaApi(apiConfig);

        const method : 'okta-verify' | 'duo-web' | 'kba' | 'token' | 'rsa' = "okta-verify"; // The name of the MFA method. The currently supported method names are \'okta-verify\', \'duo-web\', \'kba\',\'token\', \'rsa\'
        const verificationPollRequestBeta : VerificationPollRequestBeta = {requestId=089899f13a8f4da7824996191587bab9}; // 

        try {
          const val = await mFAControllerBetaApi.pingVerificationStatus(method, verificationPollRequestBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await mFAControllerBetaApi.pingVerificationStatus(method, verificationPollRequestBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /mfa/duo-web/verify
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MFAControllerBetaApi, DuoVerificationRequestBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const mFAControllerBetaApi = new MFAControllerBetaApi(apiConfig);

        const duoVerificationRequestBeta : DuoVerificationRequestBeta = {userId=2c9180947f0ef465017f215cbcfd004b, signedResponse=AUTH|d2lsbC5hbGJpbnxESTZNMFpHSThKQVRWTVpZN0M5VXwxNzAxMjUzMDg5|f1f5f8ced5b340f3d303b05d0efa0e43b6a8f970:APP|d2lsbC5hbGJpbnxESTZNMFpHSThKQVRWTVpZN0M5VXwxNzAxMjU2NjE5|cb44cf44353f5127edcae31b1da0355f87357db2}; // 

        try {
          const val = await mFAControllerBetaApi.sendDuoVerifyRequest(duoVerificationRequestBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await mFAControllerBetaApi.sendDuoVerifyRequest(duoVerificationRequestBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /mfa/kba/authenticate
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MFAControllerBetaApi, KbaAnswerRequestItemBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const mFAControllerBetaApi = new MFAControllerBetaApi(apiConfig);

        const kbaAnswerRequestItemBeta : Array<KbaAnswerRequestItemBeta> = [{id=173423, answer=822cd15d6c15aa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a0859a2fea34}, {id=c54fee53-2d63-4fc5-9259-3e93b9994135, answer=9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08}]; // 

        try {
          const val = await mFAControllerBetaApi.sendKbaAnswers(kbaAnswerRequestItemBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await mFAControllerBetaApi.sendKbaAnswers(kbaAnswerRequestItemBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /mfa/okta-verify/verify
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MFAControllerBetaApi, OktaVerificationRequestBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const mFAControllerBetaApi = new MFAControllerBetaApi(apiConfig);

        const oktaVerificationRequestBeta : OktaVerificationRequestBeta = {userId=example@mail.com}; // 

        try {
          const val = await mFAControllerBetaApi.sendOktaVerifyRequest(oktaVerificationRequestBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await mFAControllerBetaApi.sendOktaVerifyRequest(oktaVerificationRequestBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /mfa/token/authenticate
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, MFAControllerBetaApi, TokenAuthRequestBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const mFAControllerBetaApi = new MFAControllerBetaApi(apiConfig);

        const tokenAuthRequestBeta : TokenAuthRequestBeta = {token=12345, userAlias=will.albin, deliveryType=EMAIL_WORK}; // 

        try {
          const val = await mFAControllerBetaApi.sendTokenAuthRequest(tokenAuthRequestBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await mFAControllerBetaApi.sendTokenAuthRequest(tokenAuthRequestBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
