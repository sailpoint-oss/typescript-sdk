- path: /identities/{id}
  method: DELETE
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentitiesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identitiesBetaApi = new IdentitiesBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // Identity Id

        try {
          const val = await identitiesBetaApi.deleteIdentity(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await identitiesBetaApi.deleteIdentity(id);
          
          console.log('API called successfully.');
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identities/{id}
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentitiesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identitiesBetaApi = new IdentitiesBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // Identity Id

        try {
          const val = await identitiesBetaApi.getIdentity(id);
          
          // Below is a request that includes all optional parameters 
          // const val = await identitiesBetaApi.getIdentity(id);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identities/{identityId}/ownership
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentitiesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identitiesBetaApi = new IdentitiesBetaApi(apiConfig);

        const identityId : string = "ff8081814d2a8036014d701f3fbf53fa"; // Identity ID.

        try {
          const val = await identitiesBetaApi.getIdentityOwnershipDetails(identityId);
          
          // Below is a request that includes all optional parameters 
          // const val = await identitiesBetaApi.getIdentityOwnershipDetails(identityId);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identities/{identityId}/role-assignments/{assignmentId}
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentitiesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identitiesBetaApi = new IdentitiesBetaApi(apiConfig);

        const identityId : string = "ef38f94347e94562b5bb8424a56397d8"; // Identity Id
        const assignmentId : string = "1cbb0705b38c4226b1334eadd8874086"; // Assignment Id

        try {
          const val = await identitiesBetaApi.getRoleAssignment(identityId, assignmentId);
          
          // Below is a request that includes all optional parameters 
          // const val = await identitiesBetaApi.getRoleAssignment(identityId, assignmentId);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identities/{identityId}/role-assignments
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentitiesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identitiesBetaApi = new IdentitiesBetaApi(apiConfig);

        const identityId : string = "ef38f94347e94562b5bb8424a56397d8"; // Identity Id to get the role assignments for
        const roleId = "e7697a1e96d04db1ac7b0f4544915d2c"; // string | Role Id to filter the role assignments with
        const roleName = "Engineer"; // string | Role name to filter the role assignments with

        try {
          const val = await identitiesBetaApi.getRoleAssignments(identityId);
          
          // Below is a request that includes all optional parameters 
          // const val = await identitiesBetaApi.getRoleAssignments(identityId, roleId, roleName);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identities
  method: GET
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentitiesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identitiesBetaApi = new IdentitiesBetaApi(apiConfig);

        const filters = "id eq "6c9079b270a266a60170a2779fcb0006" or correlated eq false"; // string | Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **alias**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw*  **email**: *eq, sw*  **cloudStatus**: *eq*  **processingState**: *eq*  **correlated**: *eq*  **protected**: *eq*
        const sorters = "name,-cloudStatus"; // string | Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, alias, cloudStatus**
        const defaultFilter = "NONE"; // 'CORRELATED_ONLY' | 'NONE' | Adds additional filter to filters query parameter.  CORRELATED_ONLY adds correlated=true and returns only identities that are correlated.  NONE does not add any and returns all identities that satisfy filters query parameter.
        const count = true; // boolean | If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count=true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const limit = 250; // number | Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
        const offset = 0; // number | Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.

        try {
          const val = await identitiesBetaApi.listIdentities();
          
          // Below is a request that includes all optional parameters 
          // const val = await identitiesBetaApi.listIdentities(filters, sorters, defaultFilter, count, limit, offset);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identities/{identityId}/reset
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentitiesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identitiesBetaApi = new IdentitiesBetaApi(apiConfig);

        const identityId : string = "ef38f94347e94562b5bb8424a56397d8"; // Identity Id

        try {
          const val = await identitiesBetaApi.resetIdentity(identityId);
          
          // Below is a request that includes all optional parameters 
          // const val = await identitiesBetaApi.resetIdentity(identityId);
          
          console.log('API called successfully.');
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identities/{id}/verification/account/send
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentitiesBetaApi, SendAccountVerificationRequestBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identitiesBetaApi = new IdentitiesBetaApi(apiConfig);

        const id : string = "ef38f94347e94562b5bb8424a56397d8"; // Identity ID
        const sendAccountVerificationRequestBeta : SendAccountVerificationRequestBeta = ; // 

        try {
          const val = await identitiesBetaApi.sendIdentityVerificationAccountToken(id, sendAccountVerificationRequestBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await identitiesBetaApi.sendIdentityVerificationAccountToken(id, sendAccountVerificationRequestBeta);
          
          console.log('API called successfully.');
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identities/invite
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentitiesBetaApi, InviteIdentitiesRequestBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identitiesBetaApi = new IdentitiesBetaApi(apiConfig);

        const inviteIdentitiesRequestBeta : InviteIdentitiesRequestBeta = ; // 

        try {
          const val = await identitiesBetaApi.startIdentitiesInvite(inviteIdentitiesRequestBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await identitiesBetaApi.startIdentitiesInvite(inviteIdentitiesRequestBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identities/process
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentitiesBetaApi, ProcessIdentitiesRequestBeta } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identitiesBetaApi = new IdentitiesBetaApi(apiConfig);

        const processIdentitiesRequestBeta : ProcessIdentitiesRequestBeta = ; // 

        try {
          const val = await identitiesBetaApi.startIdentityProcessing(processIdentitiesRequestBeta);
          
          // Below is a request that includes all optional parameters 
          // const val = await identitiesBetaApi.startIdentityProcessing(processIdentitiesRequestBeta);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
- path: /identities/{identityId}/synchronize-attributes
  method: POST
  xCodeSample:
    - lang: TypeScript
      label: SDK
      source: |
        import { Configuration, IdentitiesBetaApi } from "sailpoint-api-client";
        const apiConfig = new Configuration();
        const identitiesBetaApi = new IdentitiesBetaApi(apiConfig);

        const identityId : string = "identityId_example"; // The Identity id

        try {
          const val = await identitiesBetaApi.synchronizeAttributesForIdentity(identityId);
          
          // Below is a request that includes all optional parameters 
          // const val = await identitiesBetaApi.synchronizeAttributesForIdentity(identityId);
          console.log('API called successfully. Returned data: ' + val.data);
          
        } catch (error) {
          console.error('Error occurred while calling API: ', error);
        }
