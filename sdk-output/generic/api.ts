/* tslint:disable */
/* eslint-disable */
/**
 * Generic Identity Security Cloud V2024 API
 * Generic API specification for the Identity Security Cloud platform
 *
 * The version of the OpenAPI document: v2024
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * @type GenericResponse
 * @export
 */
export type GenericResponse = Array<{ [key: string]: any; }> | { [key: string]: any; };


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generic DELETE request
         * @param {string} path 
         * @param {string} [xSailPointExperimental] Use this header to enable this experimental API.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        genericDelete: async (path: string, xSailPointExperimental?: string, axiosOptions: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('genericDelete', 'path', path)
            if (xSailPointExperimental === undefined) {
                xSailPointExperimental = 'true';
            }
            
            const localVarPath = `/{path}`
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication userAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "userAuth", ["sp:scopes:all"], configuration)

            // authentication userAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "userAuth", ["sp:scopes:all"], configuration)


    
            if (xSailPointExperimental != null) {
                localVarHeaderParameter['X-SailPoint-Experimental'] = String(xSailPointExperimental);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generic GET request
         * @param {string} path 
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [xSailPointExperimental] Use this header to enable this experimental API.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        genericGet: async (path: string, limit?: number, count?: boolean, offset?: number, xSailPointExperimental?: string, axiosOptions: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('genericGet', 'path', path)
            if (xSailPointExperimental === undefined) {
                xSailPointExperimental = 'true';
            }
            
            const localVarPath = `/{path}`
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication userAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "userAuth", ["sp:scopes:all"], configuration)

            // authentication userAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "userAuth", ["sp:scopes:all"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            if (xSailPointExperimental != null) {
                localVarHeaderParameter['X-SailPoint-Experimental'] = String(xSailPointExperimental);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generic PATCH request
         * @param {string} path 
         * @param {string} [xSailPointExperimental] Use this header to enable this experimental API.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        genericPatch: async (path: string, xSailPointExperimental?: string, requestBody?: { [key: string]: any; }, axiosOptions: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('genericPatch', 'path', path)
            if (xSailPointExperimental === undefined) {
                xSailPointExperimental = 'true';
            }
            
            const localVarPath = `/{path}`
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication userAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "userAuth", ["sp:scopes:all"], configuration)

            // authentication userAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "userAuth", ["sp:scopes:all"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xSailPointExperimental != null) {
                localVarHeaderParameter['X-SailPoint-Experimental'] = String(xSailPointExperimental);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generic POST request
         * @param {string} path 
         * @param {string} [xSailPointExperimental] Use this header to enable this experimental API.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        genericPost: async (path: string, xSailPointExperimental?: string, requestBody?: { [key: string]: any; }, axiosOptions: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('genericPost', 'path', path)
            if (xSailPointExperimental === undefined) {
                xSailPointExperimental = 'true';
            }
            
            const localVarPath = `/{path}`
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication userAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "userAuth", ["sp:scopes:all"], configuration)

            // authentication userAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "userAuth", ["sp:scopes:all"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xSailPointExperimental != null) {
                localVarHeaderParameter['X-SailPoint-Experimental'] = String(xSailPointExperimental);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generic PUT request
         * @param {string} path 
         * @param {string} [xSailPointExperimental] Use this header to enable this experimental API.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        genericPut: async (path: string, xSailPointExperimental?: string, requestBody?: { [key: string]: any; }, axiosOptions: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'path' is not null or undefined
            assertParamExists('genericPut', 'path', path)
            if (xSailPointExperimental === undefined) {
                xSailPointExperimental = 'true';
            }
            
            const localVarPath = `/{path}`
                .replace(`{${"path"}}`, encodeURIComponent(String(path)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication userAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "userAuth", ["sp:scopes:all"], configuration)

            // authentication userAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "userAuth", ["sp:scopes:all"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xSailPointExperimental != null) {
                localVarHeaderParameter['X-SailPoint-Experimental'] = String(xSailPointExperimental);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generic DELETE request
         * @param {string} path 
         * @param {string} [xSailPointExperimental] Use this header to enable this experimental API.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async genericDelete(path: string, xSailPointExperimental?: string, axiosOptions?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genericDelete(path, xSailPointExperimental, axiosOptions);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.genericDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Generic GET request
         * @param {string} path 
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [xSailPointExperimental] Use this header to enable this experimental API.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async genericGet(path: string, limit?: number, count?: boolean, offset?: number, xSailPointExperimental?: string, axiosOptions?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genericGet(path, limit, count, offset, xSailPointExperimental, axiosOptions);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.genericGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Generic PATCH request
         * @param {string} path 
         * @param {string} [xSailPointExperimental] Use this header to enable this experimental API.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async genericPatch(path: string, xSailPointExperimental?: string, requestBody?: { [key: string]: any; }, axiosOptions?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genericPatch(path, xSailPointExperimental, requestBody, axiosOptions);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.genericPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Generic POST request
         * @param {string} path 
         * @param {string} [xSailPointExperimental] Use this header to enable this experimental API.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async genericPost(path: string, xSailPointExperimental?: string, requestBody?: { [key: string]: any; }, axiosOptions?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genericPost(path, xSailPointExperimental, requestBody, axiosOptions);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.genericPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Generic PUT request
         * @param {string} path 
         * @param {string} [xSailPointExperimental] Use this header to enable this experimental API.
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async genericPut(path: string, xSailPointExperimental?: string, requestBody?: { [key: string]: any; }, axiosOptions?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genericPut(path, xSailPointExperimental, requestBody, axiosOptions);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.genericPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Generic DELETE request
         * @param {DefaultApiGenericDeleteRequest} requestParameters Request parameters.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        genericDelete(requestParameters: DefaultApiGenericDeleteRequest, axiosOptions?: RawAxiosRequestConfig): AxiosPromise<GenericResponse> {
            return localVarFp.genericDelete(requestParameters.path, requestParameters.xSailPointExperimental, axiosOptions).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generic GET request
         * @param {DefaultApiGenericGetRequest} requestParameters Request parameters.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        genericGet(requestParameters: DefaultApiGenericGetRequest, axiosOptions?: RawAxiosRequestConfig): AxiosPromise<GenericResponse> {
            return localVarFp.genericGet(requestParameters.path, requestParameters.limit, requestParameters.count, requestParameters.offset, requestParameters.xSailPointExperimental, axiosOptions).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generic PATCH request
         * @param {DefaultApiGenericPatchRequest} requestParameters Request parameters.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        genericPatch(requestParameters: DefaultApiGenericPatchRequest, axiosOptions?: RawAxiosRequestConfig): AxiosPromise<GenericResponse> {
            return localVarFp.genericPatch(requestParameters.path, requestParameters.xSailPointExperimental, requestParameters.requestBody, axiosOptions).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generic POST request
         * @param {DefaultApiGenericPostRequest} requestParameters Request parameters.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        genericPost(requestParameters: DefaultApiGenericPostRequest, axiosOptions?: RawAxiosRequestConfig): AxiosPromise<GenericResponse> {
            return localVarFp.genericPost(requestParameters.path, requestParameters.xSailPointExperimental, requestParameters.requestBody, axiosOptions).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generic PUT request
         * @param {DefaultApiGenericPutRequest} requestParameters Request parameters.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        genericPut(requestParameters: DefaultApiGenericPutRequest, axiosOptions?: RawAxiosRequestConfig): AxiosPromise<GenericResponse> {
            return localVarFp.genericPut(requestParameters.path, requestParameters.xSailPointExperimental, requestParameters.requestBody, axiosOptions).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for genericDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiGenericDeleteRequest
 */
export interface DefaultApiGenericDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGenericDelete
     */
    readonly path: string

    /**
     * Use this header to enable this experimental API.
     * @type {string}
     * @memberof DefaultApiGenericDelete
     */
    readonly xSailPointExperimental?: string
}

/**
 * Request parameters for genericGet operation in DefaultApi.
 * @export
 * @interface DefaultApiGenericGetRequest
 */
export interface DefaultApiGenericGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGenericGet
     */
    readonly path: string

    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof DefaultApiGenericGet
     */
    readonly limit?: number

    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof DefaultApiGenericGet
     */
    readonly count?: boolean

    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof DefaultApiGenericGet
     */
    readonly offset?: number

    /**
     * Use this header to enable this experimental API.
     * @type {string}
     * @memberof DefaultApiGenericGet
     */
    readonly xSailPointExperimental?: string
}

/**
 * Request parameters for genericPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiGenericPatchRequest
 */
export interface DefaultApiGenericPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGenericPatch
     */
    readonly path: string

    /**
     * Use this header to enable this experimental API.
     * @type {string}
     * @memberof DefaultApiGenericPatch
     */
    readonly xSailPointExperimental?: string

    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DefaultApiGenericPatch
     */
    readonly requestBody?: { [key: string]: any; }
}

/**
 * Request parameters for genericPost operation in DefaultApi.
 * @export
 * @interface DefaultApiGenericPostRequest
 */
export interface DefaultApiGenericPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGenericPost
     */
    readonly path: string

    /**
     * Use this header to enable this experimental API.
     * @type {string}
     * @memberof DefaultApiGenericPost
     */
    readonly xSailPointExperimental?: string

    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DefaultApiGenericPost
     */
    readonly requestBody?: { [key: string]: any; }
}

/**
 * Request parameters for genericPut operation in DefaultApi.
 * @export
 * @interface DefaultApiGenericPutRequest
 */
export interface DefaultApiGenericPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGenericPut
     */
    readonly path: string

    /**
     * Use this header to enable this experimental API.
     * @type {string}
     * @memberof DefaultApiGenericPut
     */
    readonly xSailPointExperimental?: string

    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DefaultApiGenericPut
     */
    readonly requestBody?: { [key: string]: any; }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Generic DELETE request
     * @param {DefaultApiGenericDeleteRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public genericDelete(requestParameters: DefaultApiGenericDeleteRequest, axiosOptions?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).genericDelete(requestParameters.path, requestParameters.xSailPointExperimental, axiosOptions).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generic GET request
     * @param {DefaultApiGenericGetRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public genericGet(requestParameters: DefaultApiGenericGetRequest, axiosOptions?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).genericGet(requestParameters.path, requestParameters.limit, requestParameters.count, requestParameters.offset, requestParameters.xSailPointExperimental, axiosOptions).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generic PATCH request
     * @param {DefaultApiGenericPatchRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public genericPatch(requestParameters: DefaultApiGenericPatchRequest, axiosOptions?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).genericPatch(requestParameters.path, requestParameters.xSailPointExperimental, requestParameters.requestBody, axiosOptions).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generic POST request
     * @param {DefaultApiGenericPostRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public genericPost(requestParameters: DefaultApiGenericPostRequest, axiosOptions?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).genericPost(requestParameters.path, requestParameters.xSailPointExperimental, requestParameters.requestBody, axiosOptions).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generic PUT request
     * @param {DefaultApiGenericPutRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public genericPut(requestParameters: DefaultApiGenericPutRequest, axiosOptions?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).genericPut(requestParameters.path, requestParameters.xSailPointExperimental, requestParameters.requestBody, axiosOptions).then((request) => request(this.axios, this.basePath));
    }
}



