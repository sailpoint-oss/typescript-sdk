/* tslint:disable */
/* eslint-disable */
/**
 * SailPoint SaaS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap  } from './base';

/**
 * 
 * @export
 * @interface BulkDeleteWorkGroups200ResponseV2
 */
export interface BulkDeleteWorkGroups200ResponseV2 {
    /**
     * 
     * @type {Array<string>}
     * @memberof BulkDeleteWorkGroups200ResponseV2
     */
    'deleted'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BulkDeleteWorkGroups200ResponseV2
     */
    'inUse'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BulkDeleteWorkGroups200ResponseV2
     */
    'notFound'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BulkDeleteWorkGroupsRequestV2
 */
export interface BulkDeleteWorkGroupsRequestV2 {
    /**
     * 
     * @type {Array<string>}
     * @memberof BulkDeleteWorkGroupsRequestV2
     */
    'ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateWorkgroupRequestOwnerV2
 */
export interface CreateWorkgroupRequestOwnerV2 {
    /**
     * 
     * @type {string}
     * @memberof CreateWorkgroupRequestOwnerV2
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface CreateWorkgroupRequestV2
 */
export interface CreateWorkgroupRequestV2 {
    /**
     * 
     * @type {string}
     * @memberof CreateWorkgroupRequestV2
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateWorkgroupRequestV2
     */
    'description'?: string;
    /**
     * 
     * @type {CreateWorkgroupRequestOwnerV2}
     * @memberof CreateWorkgroupRequestV2
     */
    'owner'?: CreateWorkgroupRequestOwnerV2;
}
/**
 * 
 * @export
 * @interface GetOrgSettings200ResponseApprovalConfigV2
 */
export interface GetOrgSettings200ResponseApprovalConfigV2 {
    /**
     * 
     * @type {number}
     * @memberof GetOrgSettings200ResponseApprovalConfigV2
     */
    'daysTillEscalation': number;
    /**
     * 
     * @type {number}
     * @memberof GetOrgSettings200ResponseApprovalConfigV2
     */
    'daysBetweenReminders': number;
    /**
     * 
     * @type {number}
     * @memberof GetOrgSettings200ResponseApprovalConfigV2
     */
    'maxReminders': number;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseApprovalConfigV2
     */
    'fallbackApprover': string;
}
/**
 * 
 * @export
 * @interface GetOrgSettings200ResponseSystemNotificationConfigNotificationsInnerThresholdsV2
 */
export interface GetOrgSettings200ResponseSystemNotificationConfigNotificationsInnerThresholdsV2 {
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseSystemNotificationConfigNotificationsInnerThresholdsV2
     */
    'healthy'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseSystemNotificationConfigNotificationsInnerThresholdsV2
     */
    'unhealthy'?: string;
}
/**
 * 
 * @export
 * @interface GetOrgSettings200ResponseSystemNotificationConfigNotificationsInnerV2
 */
export interface GetOrgSettings200ResponseSystemNotificationConfigNotificationsInnerV2 {
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseSystemNotificationConfigNotificationsInnerV2
     */
    'type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetOrgSettings200ResponseSystemNotificationConfigNotificationsInnerV2
     */
    'byEmail'?: boolean;
    /**
     * 
     * @type {GetOrgSettings200ResponseSystemNotificationConfigNotificationsInnerThresholdsV2}
     * @memberof GetOrgSettings200ResponseSystemNotificationConfigNotificationsInnerV2
     */
    'thresholds'?: GetOrgSettings200ResponseSystemNotificationConfigNotificationsInnerThresholdsV2;
}
/**
 * 
 * @export
 * @interface GetOrgSettings200ResponseSystemNotificationConfigV2
 */
export interface GetOrgSettings200ResponseSystemNotificationConfigV2 {
    /**
     * 
     * @type {Array<GetOrgSettings200ResponseSystemNotificationConfigNotificationsInnerV2>}
     * @memberof GetOrgSettings200ResponseSystemNotificationConfigV2
     */
    'notifications'?: Array<GetOrgSettings200ResponseSystemNotificationConfigNotificationsInnerV2>;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseSystemNotificationConfigV2
     */
    'recipientType'?: GetOrgSettings200ResponseSystemNotificationConfigV2RecipientTypeV2;
}

export const GetOrgSettings200ResponseSystemNotificationConfigV2RecipientTypeV2 = {
    AllAdmins: 'allAdmins',
    SpecificIdentities: 'specificIdentities'
} as const;

export type GetOrgSettings200ResponseSystemNotificationConfigV2RecipientTypeV2 = typeof GetOrgSettings200ResponseSystemNotificationConfigV2RecipientTypeV2[keyof typeof GetOrgSettings200ResponseSystemNotificationConfigV2RecipientTypeV2];

/**
 * 
 * @export
 * @interface GetOrgSettings200ResponseV2
 */
export interface GetOrgSettings200ResponseV2 {
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'dateCreated'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'lastUpdated'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'scriptName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'ssoDomain'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'status'?: GetOrgSettings200ResponseV2StatusV2;
    /**
     * 
     * @type {number}
     * @memberof GetOrgSettings200ResponseV2
     */
    'maxRegisteredIdentities'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetOrgSettings200ResponseV2
     */
    'identityCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetOrgSettings200ResponseV2
     */
    'kbaReqForAuthn'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetOrgSettings200ResponseV2
     */
    'kbaReqAnswers'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetOrgSettings200ResponseV2
     */
    'lockoutAttemptThreshold'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetOrgSettings200ResponseV2
     */
    'lockoutTimeMinutes'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetOrgSettings200ResponseV2
     */
    'usageCertRequired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetOrgSettings200ResponseV2
     */
    'adminStrongAuthRequired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetOrgSettings200ResponseV2
     */
    'enableExternalPasswordChange'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetOrgSettings200ResponseV2
     */
    'enablePasswordReplay'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetOrgSettings200ResponseV2
     */
    'enableAutomaticPasswordReplay'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetOrgSettings200ResponseV2
     */
    'netmasks'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetOrgSettings200ResponseV2
     */
    'countryCodes'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof GetOrgSettings200ResponseV2
     */
    'whiteList'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetOrgSettings200ResponseV2
     */
    'emailTestMode'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'emailTestAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'usernameEmptyText'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'usernameLabel'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetOrgSettings200ResponseV2
     */
    'enableAutomationGeneration'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'passwordReplayState'?: GetOrgSettings200ResponseV2PasswordReplayStateV2;
    /**
     * 
     * @type {GetOrgSettings200ResponseSystemNotificationConfigV2}
     * @memberof GetOrgSettings200ResponseV2
     */
    'systemNotificationConfig'?: GetOrgSettings200ResponseSystemNotificationConfigV2;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetOrgSettings200ResponseV2
     */
    'systemNotificationEmails'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'loginUrl'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetOrgSettings200ResponseV2
     */
    'redirectPatterns'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'styleHash'?: string;
    /**
     * 
     * @type {GetOrgSettings200ResponseApprovalConfigV2}
     * @memberof GetOrgSettings200ResponseV2
     */
    'approvalConfig'?: GetOrgSettings200ResponseApprovalConfigV2;
    /**
     * 
     * @type {string}
     * @memberof GetOrgSettings200ResponseV2
     */
    'ssoPartnerSource'?: string;
}

export const GetOrgSettings200ResponseV2StatusV2 = {
    Inactive: 'inactive',
    Active: 'active',
    Demo: 'demo',
    Test: 'test'
} as const;

export type GetOrgSettings200ResponseV2StatusV2 = typeof GetOrgSettings200ResponseV2StatusV2[keyof typeof GetOrgSettings200ResponseV2StatusV2];
export const GetOrgSettings200ResponseV2PasswordReplayStateV2 = {
    Enabled: 'enabled',
    Passive: 'passive',
    Disabled: 'disabled'
} as const;

export type GetOrgSettings200ResponseV2PasswordReplayStateV2 = typeof GetOrgSettings200ResponseV2PasswordReplayStateV2[keyof typeof GetOrgSettings200ResponseV2PasswordReplayStateV2];

/**
 * 
 * @export
 * @interface ListWorkgroupConnections200ResponseInnerV2
 */
export interface ListWorkgroupConnections200ResponseInnerV2 {
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroupConnections200ResponseInnerV2
     */
    'connectionType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroupConnections200ResponseInnerV2
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroupConnections200ResponseInnerV2
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroupConnections200ResponseInnerV2
     */
    'objectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroupConnections200ResponseInnerV2
     */
    'objectType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroupConnections200ResponseInnerV2
     */
    'workgroupId'?: string;
}
/**
 * 
 * @export
 * @interface ListWorkgroupMembers200ResponseInnerV2
 */
export interface ListWorkgroupMembers200ResponseInnerV2 {
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroupMembers200ResponseInnerV2
     */
    'alias'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroupMembers200ResponseInnerV2
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroupMembers200ResponseInnerV2
     */
    'externalId'?: string;
    /**
     * 
     * @type {number}
     * @memberof ListWorkgroupMembers200ResponseInnerV2
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroupMembers200ResponseInnerV2
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ListWorkgroups200ResponseInnerOwnerV2
 */
export interface ListWorkgroups200ResponseInnerOwnerV2 {
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroups200ResponseInnerOwnerV2
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroups200ResponseInnerOwnerV2
     */
    'emailAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroups200ResponseInnerOwnerV2
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroups200ResponseInnerOwnerV2
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ListWorkgroups200ResponseInnerV2
 */
export interface ListWorkgroups200ResponseInnerV2 {
    /**
     * 
     * @type {number}
     * @memberof ListWorkgroups200ResponseInnerV2
     */
    'connectionCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListWorkgroups200ResponseInnerV2
     */
    'created'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroups200ResponseInnerV2
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroups200ResponseInnerV2
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ListWorkgroups200ResponseInnerV2
     */
    'memberCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof ListWorkgroups200ResponseInnerV2
     */
    'modified'?: number;
    /**
     * 
     * @type {string}
     * @memberof ListWorkgroups200ResponseInnerV2
     */
    'name'?: string;
    /**
     * 
     * @type {ListWorkgroups200ResponseInnerOwnerV2}
     * @memberof ListWorkgroups200ResponseInnerV2
     */
    'owner'?: ListWorkgroups200ResponseInnerOwnerV2;
}
/**
 * 
 * @export
 * @interface ModifyWorkgroupMembersRequestV2
 */
export interface ModifyWorkgroupMembersRequestV2 {
    /**
     * 
     * @type {Array<string>}
     * @memberof ModifyWorkgroupMembersRequestV2
     */
    'add'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ModifyWorkgroupMembersRequestV2
     */
    'remove'?: Array<string>;
}
/**
 * 
 * @export
 * @interface UpdateOrgSettingsRequestV2
 */
export interface UpdateOrgSettingsRequestV2 {
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'countryCodes'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'enableExternalPasswordChange'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'enableAutomaticPasswordReplay'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'enableAutomationGeneration'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'kbaReqAnswers'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'kbaReqForAuthn'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'lockoutAttemptThreshold'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'lockoutTimeMinutes'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'loginUrl'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'netmasks'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'notifyAuthenticationSettingChange'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'passwordReplayState'?: UpdateOrgSettingsRequestV2PasswordReplayStateV2;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'preferredIdentityInviteTemplate'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'redirectPatterns'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'ssoPartnerSource'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'systemNotificationEmails'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'trackAnalytics'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'usageCertRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'usageCertText'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'usernameEmptyText'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'usernameLabel'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'whiteList'?: boolean;
    /**
     * 
     * @type {GetOrgSettings200ResponseApprovalConfigV2}
     * @memberof UpdateOrgSettingsRequestV2
     */
    'approvalConfig'?: GetOrgSettings200ResponseApprovalConfigV2;
}

export const UpdateOrgSettingsRequestV2PasswordReplayStateV2 = {
    Enabled: 'enabled',
    Passive: 'passive',
    Disabled: 'disabled'
} as const;

export type UpdateOrgSettingsRequestV2PasswordReplayStateV2 = typeof UpdateOrgSettingsRequestV2PasswordReplayStateV2[keyof typeof UpdateOrgSettingsRequestV2PasswordReplayStateV2];


/**
 * GovernanceGroupsV2Api - axios parameter creator
 * @export
 */
export const GovernanceGroupsV2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to bulk-delete work groups
         * @summary Bulk delete work groups
         * @param {BulkDeleteWorkGroupsRequestV2} bulkDeleteWorkGroupsRequestV2 Work group ids to delete
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteWorkGroups: async (bulkDeleteWorkGroupsRequestV2: BulkDeleteWorkGroupsRequestV2, axiosOptions: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkDeleteWorkGroupsRequestV2' is not null or undefined
            assertParamExists('bulkDeleteWorkGroups', 'bulkDeleteWorkGroupsRequestV2', bulkDeleteWorkGroupsRequestV2)
            const localVarPath = `/workgroups/bulk-delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkDeleteWorkGroupsRequestV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to create a work group
         * @summary Create Work Group
         * @param {CreateWorkgroupRequestV2} createWorkgroupRequestV2 Work group to create.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createWorkgroup: async (createWorkgroupRequestV2: CreateWorkgroupRequestV2, axiosOptions: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createWorkgroupRequestV2' is not null or undefined
            assertParamExists('createWorkgroup', 'createWorkgroupRequestV2', createWorkgroupRequestV2)
            const localVarPath = `/workgroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkgroupRequestV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
        /**
         * This API deletes a single workgroup based on the ID
         * @summary Delete Work Group By Id
         * @param {string} workgroupId The workgroup ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkgroup: async (workgroupId: string, axiosOptions: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workgroupId' is not null or undefined
            assertParamExists('deleteWorkgroup', 'workgroupId', workgroupId)
            const localVarPath = `/workgroups/{workgroupId}`
                .replace(`{${"workgroupId"}}`, encodeURIComponent(String(workgroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
        /**
         * This API returns the details for a single workgroup based on the ID
         * @summary Get Work Group By Id
         * @param {string} workgroupId The workgroup ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkgroup: async (workgroupId: string, axiosOptions: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workgroupId' is not null or undefined
            assertParamExists('getWorkgroup', 'workgroupId', workgroupId)
            const localVarPath = `/workgroups/{workgroupId}`
                .replace(`{${"workgroupId"}}`, encodeURIComponent(String(workgroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
        /**
         * This API returns the connections of a work group
         * @summary List Work Group Connections
         * @param {string} workgroupId The workgroup ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkgroupConnections: async (workgroupId: string, axiosOptions: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workgroupId' is not null or undefined
            assertParamExists('listWorkgroupConnections', 'workgroupId', workgroupId)
            const localVarPath = `/workgroups/{workgroupId}/connections`
                .replace(`{${"workgroupId"}}`, encodeURIComponent(String(workgroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
        /**
         * This API returns the members of a work group
         * @summary List Work Group Members
         * @param {string} workgroupId The workgroup ID
         * @param {number} [limit] Max number of results to return
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results.
         * @param {string} [filters] Filter results using the following syntax. [{property:name, value: \&quot;Tyler\&quot;, operation: EQ}]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkgroupMembers: async (workgroupId: string, limit?: number, offset?: number, filters?: string, axiosOptions: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workgroupId' is not null or undefined
            assertParamExists('listWorkgroupMembers', 'workgroupId', workgroupId)
            const localVarPath = `/workgroups/{workgroupId}/members`
                .replace(`{${"workgroupId"}}`, encodeURIComponent(String(workgroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
        /**
         * This API returns a list of work groups
         * @summary List Work Groups
         * @param {number} [limit] Max number of results to return
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results.
         * @param {string} [filters] Filter results using the following syntax. [{property:name, value: \&quot;Tyler\&quot;, operation: EQ}]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkgroups: async (limit?: number, offset?: number, filters?: string, axiosOptions: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workgroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to modify the members of a work group
         * @summary Modify Work Group Members
         * @param {string} workgroupId The workgroup ID
         * @param {ModifyWorkgroupMembersRequestV2} modifyWorkgroupMembersRequestV2 Add/Remove workgroup member ids.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        modifyWorkgroupMembers: async (workgroupId: string, modifyWorkgroupMembersRequestV2: ModifyWorkgroupMembersRequestV2, axiosOptions: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workgroupId' is not null or undefined
            assertParamExists('modifyWorkgroupMembers', 'workgroupId', workgroupId)
            // verify required parameter 'modifyWorkgroupMembersRequestV2' is not null or undefined
            assertParamExists('modifyWorkgroupMembers', 'modifyWorkgroupMembersRequestV2', modifyWorkgroupMembersRequestV2)
            const localVarPath = `/workgroups/{workgroupId}/members`
                .replace(`{${"workgroupId"}}`, encodeURIComponent(String(workgroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyWorkgroupMembersRequestV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
        /**
         * This API updates and returns the details for a single workgroup based on the ID
         * @summary Update Work Group By Id
         * @param {string} workgroupId The workgroup ID
         * @param {CreateWorkgroupRequestV2} createWorkgroupRequestV2 Work group to modify.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkgroup: async (workgroupId: string, createWorkgroupRequestV2: CreateWorkgroupRequestV2, axiosOptions: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workgroupId' is not null or undefined
            assertParamExists('updateWorkgroup', 'workgroupId', workgroupId)
            // verify required parameter 'createWorkgroupRequestV2' is not null or undefined
            assertParamExists('updateWorkgroup', 'createWorkgroupRequestV2', createWorkgroupRequestV2)
            const localVarPath = `/workgroups/{workgroupId}`
                .replace(`{${"workgroupId"}}`, encodeURIComponent(String(workgroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)

            // authentication UserContextAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "UserContextAuth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkgroupRequestV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
    }
};

/**
 * GovernanceGroupsV2Api - functional programming interface
 * @export
 */
export const GovernanceGroupsV2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GovernanceGroupsV2ApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to bulk-delete work groups
         * @summary Bulk delete work groups
         * @param {BulkDeleteWorkGroupsRequestV2} bulkDeleteWorkGroupsRequestV2 Work group ids to delete
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeleteWorkGroups(bulkDeleteWorkGroupsRequestV2: BulkDeleteWorkGroupsRequestV2, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkDeleteWorkGroups200ResponseV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteWorkGroups(bulkDeleteWorkGroupsRequestV2, axiosOptions);
            const operationBasePath = operationServerMap['GovernanceGroupsV2Api.bulkDeleteWorkGroups']?.[0]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API allows you to create a work group
         * @summary Create Work Group
         * @param {CreateWorkgroupRequestV2} createWorkgroupRequestV2 Work group to create.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkgroup(createWorkgroupRequestV2: CreateWorkgroupRequestV2, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListWorkgroups200ResponseInnerV2>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkgroup(createWorkgroupRequestV2, axiosOptions);
            const operationBasePath = operationServerMap['GovernanceGroupsV2Api.createWorkgroup']?.[0]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API deletes a single workgroup based on the ID
         * @summary Delete Work Group By Id
         * @param {string} workgroupId The workgroup ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkgroup(workgroupId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkgroup(workgroupId, axiosOptions);
            const operationBasePath = operationServerMap['GovernanceGroupsV2Api.deleteWorkgroup']?.[0]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API returns the details for a single workgroup based on the ID
         * @summary Get Work Group By Id
         * @param {string} workgroupId The workgroup ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkgroup(workgroupId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkgroups200ResponseInnerV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkgroup(workgroupId, axiosOptions);
            const operationBasePath = operationServerMap['GovernanceGroupsV2Api.getWorkgroup']?.[0]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API returns the connections of a work group
         * @summary List Work Group Connections
         * @param {string} workgroupId The workgroup ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkgroupConnections(workgroupId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListWorkgroupConnections200ResponseInnerV2>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkgroupConnections(workgroupId, axiosOptions);
            const operationBasePath = operationServerMap['GovernanceGroupsV2Api.listWorkgroupConnections']?.[0]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API returns the members of a work group
         * @summary List Work Group Members
         * @param {string} workgroupId The workgroup ID
         * @param {number} [limit] Max number of results to return
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results.
         * @param {string} [filters] Filter results using the following syntax. [{property:name, value: \&quot;Tyler\&quot;, operation: EQ}]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkgroupMembers(workgroupId: string, limit?: number, offset?: number, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListWorkgroupMembers200ResponseInnerV2>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkgroupMembers(workgroupId, limit, offset, filters, axiosOptions);
            const operationBasePath = operationServerMap['GovernanceGroupsV2Api.listWorkgroupMembers']?.[0]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API returns a list of work groups
         * @summary List Work Groups
         * @param {number} [limit] Max number of results to return
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results.
         * @param {string} [filters] Filter results using the following syntax. [{property:name, value: \&quot;Tyler\&quot;, operation: EQ}]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkgroups(limit?: number, offset?: number, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListWorkgroups200ResponseInnerV2>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkgroups(limit, offset, filters, axiosOptions);
            const operationBasePath = operationServerMap['GovernanceGroupsV2Api.listWorkgroups']?.[0]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API allows you to modify the members of a work group
         * @summary Modify Work Group Members
         * @param {string} workgroupId The workgroup ID
         * @param {ModifyWorkgroupMembersRequestV2} modifyWorkgroupMembersRequestV2 Add/Remove workgroup member ids.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async modifyWorkgroupMembers(workgroupId: string, modifyWorkgroupMembersRequestV2: ModifyWorkgroupMembersRequestV2, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyWorkgroupMembers(workgroupId, modifyWorkgroupMembersRequestV2, axiosOptions);
            const operationBasePath = operationServerMap['GovernanceGroupsV2Api.modifyWorkgroupMembers']?.[0]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API updates and returns the details for a single workgroup based on the ID
         * @summary Update Work Group By Id
         * @param {string} workgroupId The workgroup ID
         * @param {CreateWorkgroupRequestV2} createWorkgroupRequestV2 Work group to modify.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkgroup(workgroupId: string, createWorkgroupRequestV2: CreateWorkgroupRequestV2, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWorkgroups200ResponseInnerV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkgroup(workgroupId, createWorkgroupRequestV2, axiosOptions);
            const operationBasePath = operationServerMap['GovernanceGroupsV2Api.updateWorkgroup']?.[0]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * GovernanceGroupsV2Api - factory interface
 * @export
 */
export const GovernanceGroupsV2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GovernanceGroupsV2ApiFp(configuration)
    return {
        /**
         * This API allows you to bulk-delete work groups
         * @summary Bulk delete work groups
         * @param {GovernanceGroupsV2ApiBulkDeleteWorkGroupsRequest} requestParameters Request parameters.
        * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
    
        bulkDeleteWorkGroups(requestParameters: GovernanceGroupsV2ApiBulkDeleteWorkGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<BulkDeleteWorkGroups200ResponseV2> {
            return localVarFp.bulkDeleteWorkGroups(requestParameters.bulkDeleteWorkGroupsRequestV2, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to create a work group
         * @summary Create Work Group
         * @param {GovernanceGroupsV2ApiCreateWorkgroupRequest} requestParameters Request parameters.
        * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
    
        createWorkgroup(requestParameters: GovernanceGroupsV2ApiCreateWorkgroupRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ListWorkgroups200ResponseInnerV2>> {
            return localVarFp.createWorkgroup(requestParameters.createWorkgroupRequestV2, options).then((request) => request(axios, basePath));
        },
        /**
         * This API deletes a single workgroup based on the ID
         * @summary Delete Work Group By Id
         * @param {GovernanceGroupsV2ApiDeleteWorkgroupRequest} requestParameters Request parameters.
        * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
    
        deleteWorkgroup(requestParameters: GovernanceGroupsV2ApiDeleteWorkgroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWorkgroup(requestParameters.workgroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API returns the details for a single workgroup based on the ID
         * @summary Get Work Group By Id
         * @param {GovernanceGroupsV2ApiGetWorkgroupRequest} requestParameters Request parameters.
        * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
    
        getWorkgroup(requestParameters: GovernanceGroupsV2ApiGetWorkgroupRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkgroups200ResponseInnerV2> {
            return localVarFp.getWorkgroup(requestParameters.workgroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API returns the connections of a work group
         * @summary List Work Group Connections
         * @param {GovernanceGroupsV2ApiListWorkgroupConnectionsRequest} requestParameters Request parameters.
        * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
    
        listWorkgroupConnections(requestParameters: GovernanceGroupsV2ApiListWorkgroupConnectionsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ListWorkgroupConnections200ResponseInnerV2>> {
            return localVarFp.listWorkgroupConnections(requestParameters.workgroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API returns the members of a work group
         * @summary List Work Group Members
         * @param {GovernanceGroupsV2ApiListWorkgroupMembersRequest} requestParameters Request parameters.
        * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
    
        listWorkgroupMembers(requestParameters: GovernanceGroupsV2ApiListWorkgroupMembersRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ListWorkgroupMembers200ResponseInnerV2>> {
            return localVarFp.listWorkgroupMembers(requestParameters.workgroupId, requestParameters.limit, requestParameters.offset, requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API returns a list of work groups
         * @summary List Work Groups
         * @param {GovernanceGroupsV2ApiListWorkgroupsRequest} requestParameters Request parameters.
        * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
    
        listWorkgroups(requestParameters: GovernanceGroupsV2ApiListWorkgroupsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ListWorkgroups200ResponseInnerV2>> {
            return localVarFp.listWorkgroups(requestParameters.limit, requestParameters.offset, requestParameters.filters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to modify the members of a work group
         * @summary Modify Work Group Members
         * @param {GovernanceGroupsV2ApiModifyWorkgroupMembersRequest} requestParameters Request parameters.
        * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
    
        modifyWorkgroupMembers(requestParameters: GovernanceGroupsV2ApiModifyWorkgroupMembersRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.modifyWorkgroupMembers(requestParameters.workgroupId, requestParameters.modifyWorkgroupMembersRequestV2, options).then((request) => request(axios, basePath));
        },
        /**
         * This API updates and returns the details for a single workgroup based on the ID
         * @summary Update Work Group By Id
         * @param {GovernanceGroupsV2ApiUpdateWorkgroupRequest} requestParameters Request parameters.
        * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
    
        updateWorkgroup(requestParameters: GovernanceGroupsV2ApiUpdateWorkgroupRequest, options?: AxiosRequestConfig): AxiosPromise<ListWorkgroups200ResponseInnerV2> {
            return localVarFp.updateWorkgroup(requestParameters.workgroupId, requestParameters.createWorkgroupRequestV2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for bulkDeleteWorkGroups operation in GovernanceGroupsV2Api.
 * @export
 * @interface GovernanceGroupsV2ApiBulkDeleteWorkGroupsRequest
 */
export interface GovernanceGroupsV2ApiBulkDeleteWorkGroupsRequest {
    /**
     * Work group ids to delete
     * @type {BulkDeleteWorkGroupsRequestV2}
     * @memberof GovernanceGroupsV2ApiBulkDeleteWorkGroups
     */
    readonly bulkDeleteWorkGroupsRequestV2: BulkDeleteWorkGroupsRequestV2
}

/**
 * Request parameters for createWorkgroup operation in GovernanceGroupsV2Api.
 * @export
 * @interface GovernanceGroupsV2ApiCreateWorkgroupRequest
 */
export interface GovernanceGroupsV2ApiCreateWorkgroupRequest {
    /**
     * Work group to create.
     * @type {CreateWorkgroupRequestV2}
     * @memberof GovernanceGroupsV2ApiCreateWorkgroup
     */
    readonly createWorkgroupRequestV2: CreateWorkgroupRequestV2
}

/**
 * Request parameters for deleteWorkgroup operation in GovernanceGroupsV2Api.
 * @export
 * @interface GovernanceGroupsV2ApiDeleteWorkgroupRequest
 */
export interface GovernanceGroupsV2ApiDeleteWorkgroupRequest {
    /**
     * The workgroup ID
     * @type {string}
     * @memberof GovernanceGroupsV2ApiDeleteWorkgroup
     */
    readonly workgroupId: string
}

/**
 * Request parameters for getWorkgroup operation in GovernanceGroupsV2Api.
 * @export
 * @interface GovernanceGroupsV2ApiGetWorkgroupRequest
 */
export interface GovernanceGroupsV2ApiGetWorkgroupRequest {
    /**
     * The workgroup ID
     * @type {string}
     * @memberof GovernanceGroupsV2ApiGetWorkgroup
     */
    readonly workgroupId: string
}

/**
 * Request parameters for listWorkgroupConnections operation in GovernanceGroupsV2Api.
 * @export
 * @interface GovernanceGroupsV2ApiListWorkgroupConnectionsRequest
 */
export interface GovernanceGroupsV2ApiListWorkgroupConnectionsRequest {
    /**
     * The workgroup ID
     * @type {string}
     * @memberof GovernanceGroupsV2ApiListWorkgroupConnections
     */
    readonly workgroupId: string
}

/**
 * Request parameters for listWorkgroupMembers operation in GovernanceGroupsV2Api.
 * @export
 * @interface GovernanceGroupsV2ApiListWorkgroupMembersRequest
 */
export interface GovernanceGroupsV2ApiListWorkgroupMembersRequest {
    /**
     * The workgroup ID
     * @type {string}
     * @memberof GovernanceGroupsV2ApiListWorkgroupMembers
     */
    readonly workgroupId: string

    /**
     * Max number of results to return
     * @type {number}
     * @memberof GovernanceGroupsV2ApiListWorkgroupMembers
     */
    readonly limit?: number

    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results.
     * @type {number}
     * @memberof GovernanceGroupsV2ApiListWorkgroupMembers
     */
    readonly offset?: number

    /**
     * Filter results using the following syntax. [{property:name, value: \&quot;Tyler\&quot;, operation: EQ}]
     * @type {string}
     * @memberof GovernanceGroupsV2ApiListWorkgroupMembers
     */
    readonly filters?: string
}

/**
 * Request parameters for listWorkgroups operation in GovernanceGroupsV2Api.
 * @export
 * @interface GovernanceGroupsV2ApiListWorkgroupsRequest
 */
export interface GovernanceGroupsV2ApiListWorkgroupsRequest {
    /**
     * Max number of results to return
     * @type {number}
     * @memberof GovernanceGroupsV2ApiListWorkgroups
     */
    readonly limit?: number

    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results.
     * @type {number}
     * @memberof GovernanceGroupsV2ApiListWorkgroups
     */
    readonly offset?: number

    /**
     * Filter results using the following syntax. [{property:name, value: \&quot;Tyler\&quot;, operation: EQ}]
     * @type {string}
     * @memberof GovernanceGroupsV2ApiListWorkgroups
     */
    readonly filters?: string
}

/**
 * Request parameters for modifyWorkgroupMembers operation in GovernanceGroupsV2Api.
 * @export
 * @interface GovernanceGroupsV2ApiModifyWorkgroupMembersRequest
 */
export interface GovernanceGroupsV2ApiModifyWorkgroupMembersRequest {
    /**
     * The workgroup ID
     * @type {string}
     * @memberof GovernanceGroupsV2ApiModifyWorkgroupMembers
     */
    readonly workgroupId: string

    /**
     * Add/Remove workgroup member ids.
     * @type {ModifyWorkgroupMembersRequestV2}
     * @memberof GovernanceGroupsV2ApiModifyWorkgroupMembers
     */
    readonly modifyWorkgroupMembersRequestV2: ModifyWorkgroupMembersRequestV2
}

/**
 * Request parameters for updateWorkgroup operation in GovernanceGroupsV2Api.
 * @export
 * @interface GovernanceGroupsV2ApiUpdateWorkgroupRequest
 */
export interface GovernanceGroupsV2ApiUpdateWorkgroupRequest {
    /**
     * The workgroup ID
     * @type {string}
     * @memberof GovernanceGroupsV2ApiUpdateWorkgroup
     */
    readonly workgroupId: string

    /**
     * Work group to modify.
     * @type {CreateWorkgroupRequestV2}
     * @memberof GovernanceGroupsV2ApiUpdateWorkgroup
     */
    readonly createWorkgroupRequestV2: CreateWorkgroupRequestV2
}

/**
 * GovernanceGroupsV2Api - object-oriented interface
 * @export
 * @class GovernanceGroupsV2Api
 * @extends {BaseAPI}
 */
export class GovernanceGroupsV2Api extends BaseAPI {
    /**
     * This API allows you to bulk-delete work groups
     * @summary Bulk delete work groups
     * @param {GovernanceGroupsV2ApiBulkDeleteWorkGroupsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsV2Api
     */
    public bulkDeleteWorkGroups(requestParameters: GovernanceGroupsV2ApiBulkDeleteWorkGroupsRequest, axiosOptions?: AxiosRequestConfig) {
        return GovernanceGroupsV2ApiFp(this.configuration).bulkDeleteWorkGroups(requestParameters.bulkDeleteWorkGroupsRequestV2, axiosOptions).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to create a work group
     * @summary Create Work Group
     * @param {GovernanceGroupsV2ApiCreateWorkgroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsV2Api
     */
    public createWorkgroup(requestParameters: GovernanceGroupsV2ApiCreateWorkgroupRequest, axiosOptions?: AxiosRequestConfig) {
        return GovernanceGroupsV2ApiFp(this.configuration).createWorkgroup(requestParameters.createWorkgroupRequestV2, axiosOptions).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API deletes a single workgroup based on the ID
     * @summary Delete Work Group By Id
     * @param {GovernanceGroupsV2ApiDeleteWorkgroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsV2Api
     */
    public deleteWorkgroup(requestParameters: GovernanceGroupsV2ApiDeleteWorkgroupRequest, axiosOptions?: AxiosRequestConfig) {
        return GovernanceGroupsV2ApiFp(this.configuration).deleteWorkgroup(requestParameters.workgroupId, axiosOptions).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API returns the details for a single workgroup based on the ID
     * @summary Get Work Group By Id
     * @param {GovernanceGroupsV2ApiGetWorkgroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsV2Api
     */
    public getWorkgroup(requestParameters: GovernanceGroupsV2ApiGetWorkgroupRequest, axiosOptions?: AxiosRequestConfig) {
        return GovernanceGroupsV2ApiFp(this.configuration).getWorkgroup(requestParameters.workgroupId, axiosOptions).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API returns the connections of a work group
     * @summary List Work Group Connections
     * @param {GovernanceGroupsV2ApiListWorkgroupConnectionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsV2Api
     */
    public listWorkgroupConnections(requestParameters: GovernanceGroupsV2ApiListWorkgroupConnectionsRequest, axiosOptions?: AxiosRequestConfig) {
        return GovernanceGroupsV2ApiFp(this.configuration).listWorkgroupConnections(requestParameters.workgroupId, axiosOptions).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API returns the members of a work group
     * @summary List Work Group Members
     * @param {GovernanceGroupsV2ApiListWorkgroupMembersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsV2Api
     */
    public listWorkgroupMembers(requestParameters: GovernanceGroupsV2ApiListWorkgroupMembersRequest, axiosOptions?: AxiosRequestConfig) {
        return GovernanceGroupsV2ApiFp(this.configuration).listWorkgroupMembers(requestParameters.workgroupId, requestParameters.limit, requestParameters.offset, requestParameters.filters, axiosOptions).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API returns a list of work groups
     * @summary List Work Groups
     * @param {GovernanceGroupsV2ApiListWorkgroupsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsV2Api
     */
    public listWorkgroups(requestParameters: GovernanceGroupsV2ApiListWorkgroupsRequest = {}, axiosOptions?: AxiosRequestConfig) {
        return GovernanceGroupsV2ApiFp(this.configuration).listWorkgroups(requestParameters.limit, requestParameters.offset, requestParameters.filters, axiosOptions).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to modify the members of a work group
     * @summary Modify Work Group Members
     * @param {GovernanceGroupsV2ApiModifyWorkgroupMembersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsV2Api
     */
    public modifyWorkgroupMembers(requestParameters: GovernanceGroupsV2ApiModifyWorkgroupMembersRequest, axiosOptions?: AxiosRequestConfig) {
        return GovernanceGroupsV2ApiFp(this.configuration).modifyWorkgroupMembers(requestParameters.workgroupId, requestParameters.modifyWorkgroupMembersRequestV2, axiosOptions).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API updates and returns the details for a single workgroup based on the ID
     * @summary Update Work Group By Id
     * @param {GovernanceGroupsV2ApiUpdateWorkgroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsV2Api
     */
    public updateWorkgroup(requestParameters: GovernanceGroupsV2ApiUpdateWorkgroupRequest, axiosOptions?: AxiosRequestConfig) {
        return GovernanceGroupsV2ApiFp(this.configuration).updateWorkgroup(requestParameters.workgroupId, requestParameters.createWorkgroupRequestV2, axiosOptions).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrgV2Api - axios parameter creator
 * @export
 */
export const OrgV2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves information and operational settings for your org (as determined by the URL domain).
         * @summary Retrieves your org settings.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getOrgSettings: async (axiosOptions: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
        /**
         * Updates one or more attributes for your org.
         * @summary Updates one or more org attributes.
         * @param {UpdateOrgSettingsRequestV2} updateOrgSettingsRequestV2 Org settings to update.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateOrgSettings: async (updateOrgSettingsRequestV2: UpdateOrgSettingsRequestV2, axiosOptions: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateOrgSettingsRequestV2' is not null or undefined
            assertParamExists('updateOrgSettings', 'updateOrgSettingsRequestV2', updateOrgSettingsRequestV2)
            const localVarPath = `/org`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...axiosOptions};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...axiosOptions.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrgSettingsRequestV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                axiosOptions: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgV2Api - functional programming interface
 * @export
 */
export const OrgV2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgV2ApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves information and operational settings for your org (as determined by the URL domain).
         * @summary Retrieves your org settings.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgSettings(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrgSettings200ResponseV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgSettings(axiosOptions);
            const operationBasePath = operationServerMap['OrgV2Api.getOrgSettings']?.[0]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Updates one or more attributes for your org.
         * @summary Updates one or more org attributes.
         * @param {UpdateOrgSettingsRequestV2} updateOrgSettingsRequestV2 Org settings to update.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrgSettings(updateOrgSettingsRequestV2: UpdateOrgSettingsRequestV2, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrgSettings200ResponseV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrgSettings(updateOrgSettingsRequestV2, axiosOptions);
            const operationBasePath = operationServerMap['OrgV2Api.updateOrgSettings']?.[0]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * OrgV2Api - factory interface
 * @export
 */
export const OrgV2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgV2ApiFp(configuration)
    return {
        /**
         * Retrieves information and operational settings for your org (as determined by the URL domain).
         * @summary Retrieves your org settings.
        * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
    
        getOrgSettings(options?: AxiosRequestConfig): AxiosPromise<GetOrgSettings200ResponseV2> {
            return localVarFp.getOrgSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates one or more attributes for your org.
         * @summary Updates one or more org attributes.
         * @param {OrgV2ApiUpdateOrgSettingsRequest} requestParameters Request parameters.
        * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
    
        updateOrgSettings(requestParameters: OrgV2ApiUpdateOrgSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<GetOrgSettings200ResponseV2> {
            return localVarFp.updateOrgSettings(requestParameters.updateOrgSettingsRequestV2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for updateOrgSettings operation in OrgV2Api.
 * @export
 * @interface OrgV2ApiUpdateOrgSettingsRequest
 */
export interface OrgV2ApiUpdateOrgSettingsRequest {
    /**
     * Org settings to update.
     * @type {UpdateOrgSettingsRequestV2}
     * @memberof OrgV2ApiUpdateOrgSettings
     */
    readonly updateOrgSettingsRequestV2: UpdateOrgSettingsRequestV2
}

/**
 * OrgV2Api - object-oriented interface
 * @export
 * @class OrgV2Api
 * @extends {BaseAPI}
 */
export class OrgV2Api extends BaseAPI {
    /**
     * Retrieves information and operational settings for your org (as determined by the URL domain).
     * @summary Retrieves your org settings.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgV2Api
     */
    public getOrgSettings(axiosOptions?: AxiosRequestConfig) {
        return OrgV2ApiFp(this.configuration).getOrgSettings(axiosOptions).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates one or more attributes for your org.
     * @summary Updates one or more org attributes.
     * @param {OrgV2ApiUpdateOrgSettingsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgV2Api
     */
    public updateOrgSettings(requestParameters: OrgV2ApiUpdateOrgSettingsRequest, axiosOptions?: AxiosRequestConfig) {
        return OrgV2ApiFp(this.configuration).updateOrgSettings(requestParameters.updateOrgSettingsRequestV2, axiosOptions).then((request) => request(this.axios, this.basePath));
    }
}



